
package ws.client;

import java.math.BigDecimal;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SnipingAgentWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SnipingAgentWebService {


    /**
     * 
     * @param auctionListing
     * @param maxAmount
     * @param customer
     * @param cal
     */
    @WebMethod
    @RequestWrapper(localName = "createNewSnipingBid", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewSnipingBid")
    @ResponseWrapper(localName = "createNewSnipingBidResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewSnipingBidResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/createNewSnipingBidRequest", output = "http://ws.session.ejb/SnipingAgentWebService/createNewSnipingBidResponse")
    public void createNewSnipingBid(
        @WebParam(name = "customer", targetNamespace = "")
        CustomerEntity customer,
        @WebParam(name = "auctionListing", targetNamespace = "")
        AuctionListingEntity auctionListing,
        @WebParam(name = "cal", targetNamespace = "")
        XMLGregorianCalendar cal,
        @WebParam(name = "maxAmount", targetNamespace = "")
        BigDecimal maxAmount);

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns ws.client.CustomerEntity
     * @throws CustomerNotPremiumException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "remoteLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RemoteLogin")
    @ResponseWrapper(localName = "remoteLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RemoteLoginResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/remoteLoginRequest", output = "http://ws.session.ejb/SnipingAgentWebService/remoteLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/remoteLogin/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = CustomerNotPremiumException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/remoteLogin/Fault/CustomerNotPremiumException")
    })
    public CustomerEntity remoteLogin(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws CustomerNotPremiumException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param customerId
     * @return
     *     returns java.math.BigDecimal
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewCreditBalance", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewCreditBalance")
    @ResponseWrapper(localName = "viewCreditBalanceResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewCreditBalanceResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/viewCreditBalanceRequest", output = "http://ws.session.ejb/SnipingAgentWebService/viewCreditBalanceResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/viewCreditBalance/Fault/CustomerNotFoundException")
    })
    public BigDecimal viewCreditBalance(
        @WebParam(name = "customerId", targetNamespace = "")
        long customerId)
        throws CustomerNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param username
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "premiumRegistration", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PremiumRegistration")
    @ResponseWrapper(localName = "premiumRegistrationResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PremiumRegistrationResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/premiumRegistrationRequest", output = "http://ws.session.ejb/SnipingAgentWebService/premiumRegistrationResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/premiumRegistration/Fault/CustomerNotFoundException")
    })
    public void premiumRegistration(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws CustomerNotFoundException_Exception
    ;

    /**
     * 
     * @param customerId
     * @return
     *     returns java.util.List<ws.client.AuctionListingEntity>
     * @throws AuctionListingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveWonListing", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveWonListing")
    @ResponseWrapper(localName = "retrieveWonListingResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveWonListingResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/retrieveWonListingRequest", output = "http://ws.session.ejb/SnipingAgentWebService/retrieveWonListingResponse", fault = {
        @FaultAction(className = AuctionListingNotFoundException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/retrieveWonListing/Fault/AuctionListingNotFoundException")
    })
    public List<AuctionListingEntity> retrieveWonListing(
        @WebParam(name = "customerId", targetNamespace = "")
        long customerId)
        throws AuctionListingNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<ws.client.AuctionListingEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewAuctionListings", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewAuctionListings")
    @ResponseWrapper(localName = "viewAuctionListingsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewAuctionListingsResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/viewAuctionListingsRequest", output = "http://ws.session.ejb/SnipingAgentWebService/viewAuctionListingsResponse")
    public List<AuctionListingEntity> viewAuctionListings();

    /**
     * 
     * @param auctionListingId
     * @return
     *     returns ws.client.AuctionListingEntity
     * @throws AuctionListingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAuctionListing", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAuctionListing")
    @ResponseWrapper(localName = "retrieveAuctionListingResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAuctionListingResponse")
    @Action(input = "http://ws.session.ejb/SnipingAgentWebService/retrieveAuctionListingRequest", output = "http://ws.session.ejb/SnipingAgentWebService/retrieveAuctionListingResponse", fault = {
        @FaultAction(className = AuctionListingNotFoundException_Exception.class, value = "http://ws.session.ejb/SnipingAgentWebService/retrieveAuctionListing/Fault/AuctionListingNotFoundException")
    })
    public AuctionListingEntity retrieveAuctionListing(
        @WebParam(name = "auctionListingId", targetNamespace = "")
        long auctionListingId)
        throws AuctionListingNotFoundException_Exception
    ;

}
